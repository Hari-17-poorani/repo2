name: Publish Docker Image and Deploy to EC2

on:
  push:
    branches: ['main']

jobs:
  # Job to build and push Docker image to Docker Hub
  push_to_registry:
    name: Build and Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/node-js  # Changed to lowercase
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/node-js:latest  # Explicitly set tag
          labels: ${{ steps.meta.outputs.labels }}

  # Job to deploy Docker container to EC2 instance
  deploy_to_ec2:
    name: Deploy Docker Container to EC2
    runs-on: ubuntu-latest
    needs: push_to_registry  # Ensure deployment happens after the image is pushed
    steps:
      - name: Checkout repository again (if needed on EC2)
        uses: actions/checkout@v3

      - name: Deploy to EC2 via SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 instance public IP or DNS
          EC2_USER: ${{ secrets.EC2_USER }}  # EC2 username (e.g., 'ubuntu')
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # SSH private key for EC2 access
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username
        run: |
          # Create a private key file from the secret stored in GitHub Actions
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem  # Set correct permissions for the private key

          # SSH to EC2 instance and deploy Docker container
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # Stop and remove the existing container (if running)
            docker stop nodejs-container || true
            docker rm nodejs-container || true

            # Remove old image (optional, to free space)
            docker rmi $DOCKER_USERNAME/node-js:latest || true

            # Pull the latest Docker image from Docker Hub
            docker pull $DOCKER_USERNAME/node-js:latest  

            # Run the Docker container (modify container name and options as needed)
            docker run -d --name nodejs-container -p 80:80 $DOCKER_USERNAME/node-js:latest  # Run the container in detached mode
          EOF
