name: Publish Docker Image and Deploy to EC2

on:
  push:
    branches: ['main']

jobs:
  # Job to build and push Docker image to Docker Hub
  push_to_registry:
    name: Build and Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/node-js  # Changed to lowercase
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/node-js:latest  # Explicitly set tag
          labels: ${{ steps.meta.outputs.labels }}

  # Job to deploy Docker container to EC2 instance
  # Job to deploy Docker container to EC2 instance
  deploy_to_ec2:
    name: Deploy Docker container to EC2
    runs-on: ubuntu-latest
    needs: push_to_registry  # Ensure deployment happens after the image is pushed
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH Key and Deploy
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}  # EC2 instance public IP or DNS
          EC2_USER: ${{ secrets.EC2_USER }}  # EC2 username (e.g., 'ubuntu' for AWS)
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}  # SSH private key for EC2 access
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username
        run: |
          echo "Setting up private key for SSH access..."
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem  # Secure the key

          echo "Connecting to EC2 and deploying container..."
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            echo "Logging into EC2 instance..."

            # Stop and remove the existing container if it exists
            if [ "$(docker ps -aq -f name=nodejs-container)" ]; then
              echo "Stopping and removing existing container..."
              docker stop nodejs-container
              docker rm nodejs-container
            fi

            # Remove old image to prevent conflicts
            if [ "$(docker images -q $DOCKER_USERNAME/node-js:latest)" ]; then
              echo "Removing old Docker image..."
              docker rmi $DOCKER_USERNAME/node-js:latest
            fi

            # Pull the latest image from Docker Hub
            echo "Pulling the latest image..."
            docker pull $DOCKER_USERNAME/node-js:latest

            # Run the container
            echo "Starting new container..."
            docker run -d --name nodejs-container -p 80:80 $DOCKER_USERNAME/node-js:latest

            # Verify the running container
            echo "Deployment completed. Running containers:"
            docker ps -a
          EOF

      - name: Clean up SSH private key
        run: rm -f private_key.pem  # Remove private key for security
